//*********** PRIMARY KEYT - FORIGN KEY ******************//

CREATE TABLE users(
id INT,
name VARCHAR(30) NOT NULL,
email VARCHAR(30) UNIQUE NOT NULL,
phone VARCHAR(20) UNIQUE NOT NULL,
PRIMARY KEY(id)
);

INSERT INTO USERS VALUES(1, "SAIRAM", "s@me.ne", "12121212");
INSERT INTO USERS VALUES(2, "Baba", "Baba@gmail.com", "898989898");
INSERT INTO USERS VALUES(3, "Naresh", "Naresh@gmail.com", "23232332322");
INSERT INTO USERS VALUES(4, "Armugam", "Armugam@gmail.com", "4444777744");
INSERT INTO USERS VALUES(5, "Bobbiraja", "Bobbiraja@gmail.com", "1234567");
INSERT INTO USERS VALUES(6, "Rao", "Rao@gmail.com", "89101112");
INSERT INTO USERS VALUES(7, "Srinappa", "Srinappa@gmail.com", "1468024680");

INSERT INTO USERS VALUES(9, "SAIRAM", "s@me.ne", "121212121");
//ERROR 1062 (23000): Duplicate entry 's@me.ne' for key 'users.email'


CREATE TABLE orders(
id INT,
quantity INT,
price DECIMAL(7,2),
order_date DATETIME DEFAULT NOW() ON UPDATE NOW(),
customer_id INT,
PRIMARY KEY(id),
FOREIGN KEY(customer_id) REFERENCES users(id));

// ONCE YOU HAE FOREIGN KEY CONSTRAINTS YOU CANNOT DELETE  the dependant records in dependent tables. For example you cannot delete the the USER with out DELETING
// the  corresponding ORDER
// TO SOLVE USE
//ON DELETE CASCADE

CREATE TABLE orders(
id INT,
quantity INT,
price DECIMAL(7,2),
order_date DATETIME DEFAULT NOW() ON UPDATE NOW(),
customer_id INT,
PRIMARY KEY(id),
FOREIGN KEY(customer_id) REFERENCES users(id))
ON DELETE CASCADE;


INSERT INTO orders(id,quantity,price,customer_id) VALUES
(12, 2, 1200.00, 1),
(2, 4, 2200.00, 1),
(6, 3, 4200.00, 2),
(122, 3, 6200.00, 3),
(452, 4, 7200.00, 4),
(2222, 6, 8200.00, 4),
(22, 8, 12200.00, 7);

INSERT INTO orders(id,quantity,price,customer_id) VALUES (3332, 222,2222.02 , 17);
//ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails
//(`emp_db`.`orders`, CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `users` (`id`))


// If you want to create FOREIGN KEY  on non PRIMARY KEY fileld it needs to be indexed
CREATE INDEX  name_index_users USING HASH on users (name);

CREATE TABLE orders2(
id INT,
name VARCHAR(20),
quantity INT,
price DECIMAL(7,2),
order_date DATETIME DEFAULT NOW() ON UPDATE NOW(),
customer_id INT,
PRIMARY KEY(id),
FOREIGN KEY(name) REFERENCES users(name));



//*********** PRIMARY KEYT - FORIGN KEY ******************//


//********************* CROSS JOIN - INNER JOIN***************************//


//Implicit Inner JOINS

//SECTE ORDERS CREATED By Customer

SELECT * FROM orders WHERE customer_id = ( SELECT id FROM users WHERE name = "SAIRAM");

//CROSS JOIN Will not give accurate results , rather they match all the records of second table with first table;

SELECT * FROM users,orders;


// Modified Version gets the accurate results
SELECT * FROM orders, users WHERE customer_id=users.id;

//Explicit Inner JOINS
SELECT * FROM users JOIN orders ON orders.customer_id = users.id GROUP BY name;
SELECT name,email, Orders.id, quantity,price,order_date FROM users JOIN orders ON users.id = orders.customer_id ORDER BY name,order_date;

//********************* CROSS JOIN - INNER JOIN***************************//

//***********************LEFT JOIN ***************************************//

//SELECTS ALL FROM FIRST TABLE AND JOINS ON CONDITION WITH RIGHT TABLE
SELECT users.id as user_id ,name, order_date,quantity, SUM(price) FROM users LEFT JOIN orders ON users.id = customer_id GROUP BY name ORDER BY user_id;

// LITTLE FANCIER WITH IFNULL()
SELECT users.id as user_id ,name, IFNULL(order_date,"NA"),IFNULL(quantity,0), IFNULL(SUM(price),0) FROM users LEFT JOIN orders ON
users.id = customer_id GROUP BY name ORDER BY user_id;
SELECT users.id as user_id ,name, order_date,quantity, price FROM users RIGHT JOIN orders ON users.id = customer_id;

//***********************LEFT JOIN ****************************************//


//***********************RIGHT JOIN ***************************************//

//SELECTS ALL FROM SECOND TABLE AND JOINS ON CONDITION WITH FIRST TABLE
SELECT users.id as user_id ,name, order_date,quantity, price FROM users RIGHT JOIN orders ON users.id = customer_id;

//***********************RIGHT JOIN ***************************************//



//*********************** MANY - MANY *****************************************//

// 3 Tables  - 1- Movies , 2- Reviewers 3 - Reviews

CREATE TABLE movies(
id INT,
title VARCHAR(100),
released_year YEAR(4),
genre VARCHAR(100),
PRIMARY KEY(id)
);

CREATE TABLE reviewers(
id INT,
name VARCHAR(100),
bio VARCHAR(100),
PRIMARY KEY(id));

CREATE TABLE reviews(
id INT,
movie_id INT,
reviewer_id INT,
rating DECIMAL(2,1),
comments VARCHAR(200),
PRIMARY KEY(id),
FOREIGN KEY(movie_id) REFERENCES movies(id),
FOREIGN KEY(reviewer_id) REFERENCES reviewers(id));


INSERT INTO movies VALUES
(1,"Bahubali1",2015,"fantasy"),(2,"Intersteller",2014,"SCI-FI"),(3,"Bahubali2",2017,"fantasy"),(4,"V",2020,"drama"),
(5,"Check",2021,"thriller"),(6,"InstantFamily",2014,"drama"),(7,"Jersy",2019,"drama"),(8,"Devudu",2000,"drama");

INSERT INTO reviewers VALUES
(1,"Raja","Avasarama"),(2,"Bobbili","Mr B"), (3,"kk","ithe"),(4,"Mr B","Mata Sutiga"),
(5,"Adi","Udal kadu"),(6,"Ram","NA"), (7,"Bhim","avuna"),(8,"Anu","NA");

INSERT INTO reviews VALUES
(1,1,1,9.0,"NA"),(2,2,1,9.5,"NA"),(3,3,1,9.2,"NA"),(4,4,1,5.0,"NA"),(5,5,1,4.0,"NA"),(6,6,1,7.4,"NA"),(7,7,1,9.9,"NA"),(8,8,1,1.0,"NA"),
(9,1,2,9.1,"NA"),(10,2,2,9.7,"NA"),(11,3,2,9.2,"NA"),(12,4,2,4.5,"NA"),(13,5,2,4.0,"NA"),(14,6,2,6.4,"NA"),(15,7,2,9.9,"NA"),(16,8,2,1.2,"NA"),
(17,1,3,8.9,"NA"),(18,2,3,9.4,"NA"),(19,3,3,9.1,"NA"),(20,4,3,5.0,"NA"),
(21,1,4,9.0,"NA"),(22,2,4,9.2,"NA"),(23,7,4,9.9,"NA"),(24,8,4,1.0,"NA"),
(25,1,5,8.7,"NA"),(26,2,5,9.5,"NA"),(27,5,5,4.1,"NA"),(28,6,5,7.4,"NA"),
(29,1,6,9.0,"NA"),(30,8,6,2.0,"NA"),
(31,1,7,9.0,"NA"),(32,2,7,9.5,"NA"),(33,3,7,9.2,"NA"),(34,4,7,5.0,"NA"),(35,5,7,4.0,"NA"),(36,6,7,7.4,"NA"),(37,8,7,1.0,"NA"),
(38,1,8,9.1,"NA"),(39,2,8,9.4,"NA"),(40,3,8,9.1,"NA"),(41,4,8,5.0,"NA"),(42,5,8,4.0,"NA"),(43,6,8,7.2,"NA"),(44,7,8,9.9,"NA"),(45,8,8,1.2,"NA");



//FIND THE AVG RATINGS  OF movies
SELECT * ,AVG(rating) FROM movies LEFT JOIN reviews ON movies.id =  movie_id GROUP BY title;

// FIND MOVIES That are not reviewed
SELECT title AS unreviewed_movie FROM movies LEFT JOIN reviews ON movies.id = reviews.movie_id
WHERE rating IS NULL;

//FIND AVG RATING PER GENRE
SELECT genre,ROUND(AVG(rating),2) FROM movies LEFT JOIN reviews ON movies.id = reviews.movie_id GROUP BY 1;




//JOIN MULTIPLE TABLES - FIND THE MOVIE ,RATING AND THE REVIEWER

SELECT movies.title AS Title, reviews.rating AS Rating, reviewers.name as Reviewer
FROM movies INNER JOIN  reviews ON  movies.id = reviews.movie_id
            INNER JOIN  reviewers ON reviews.reviewer_id = reviewers.id
ORDER BY Title;

//*********************** MANY - MANY *****************************************//


//************************ SELF JOINS ************************//

CREATE TABLE movies2(
id INT,
title VARCHAR(100),
released_year YEAR(4),
genre VARCHAR(100),
prequel INT,
PRIMARY KEY(id),
FOREIGN KEY(prequel) REFERENCES movies2(id)
);

INSERT INTO movies2 VALUES (1,"Bahubali2",2017,"fantasy",3);

INSERT INTO movies2(id,title,released_year,genre) VALUES
(2,"Intersteller",2014,"SCI-FI"),(3,"Bahubali1",2015,"fantasy"),(4,"V",2020,"drama"),
(5,"Check",2021,"thriller"),(6,"InstantFamily",2014,"drama"),(7,"Jersy",2019,"drama"),(8,"Devudu",2000,"drama");

INSERT INTO movies2(id,title,released_year,genre) VALUES
(9,"300: Rise of an Empire",2014,"fantasy"),
(11,"Money",1993,"comedy"),
(12,"God Father","1972","crime");



INSERT INTO movies2 VALUES
(13,"300",2007,"fantasy",9),
(15,"Money Money",1994,"comedy",11),
(14,"Money Money And More Money",2011,"comedy",15),
(16,"God Father Part II","1974","crime",12),
(17,"God Father Part III","1990","crime",16);


// Display the Movies which has sequeals

SELECT a.id,a.title,a.released_year AS year,b.title AS prequel,b.released_year as prequel_year FROM movies2 as a
JOIN movies2 as b
WHERE a.prequel = b.id
ORDER BY year;

CREATE VIEW movies_sequels AS
SELECT a.id,a.title,a.released_year AS year,b.title AS prequel,b.released_year as prequel_year FROM movies2 as a
JOIN movies2 as b
WHERE a.prequel = b.id;

//************************ SELF JOINS ************************//